{"mappings":"ACAA,iKAAiK;AACjK,gJAAgJ;AAEhJ,mFAAmF,EACnF,2DAA2D;AAC3D,GAAG,AAAkB,aAAlB,OAAO,OAAwB,CAIhC,eAAe,EAAY,CAAO,EAChC,GAAG,AAAkB,mBAAlB,EAAQ,KAAK,EAAyB,AAAiB,gBAAjB,EAAQ,IAAI,CACnD,MAGkB,CAAA,YAAjB,EAAQ,IAAI,EACb,CAAA,EAAU,IAAI,QAAQ,EAAQ,GAAG,CAAE,CACjC,MAAO,EAAQ,KAAK,CACpB,YAAa,OACb,QAAS,EAAQ,OAAO,CACxB,UAAW,EAAQ,SAAS,CAC5B,YAAa,EAAQ,WAAW,CAChC,UAAW,EAAQ,SAAS,CAC5B,OAAQ,EAAQ,MAAM,CACtB,KAAM,EAAQ,IAAI,CAClB,SAAU,EAAQ,QAAQ,CAC1B,SAAU,EAAQ,QAAQ,CAC1B,eAAgB,EAAQ,cAAc,CACtC,OAAQ,EAAQ,MAAM,AACxB,EAAA,EAGF,IAAI,EAAI,MAAM,MAAM,GAAS,KAAK,CAAC,AAAA,GAAK,QAAQ,KAAK,CAAC,IAEtD,GAAG,AAAa,IAAb,EAAE,MAAM,CACT,OAAO,EAGT,IAAM,EAAU,IAAI,QAAQ,EAAE,OAAO,EAIrC,OAHA,EAAQ,GAAG,CAAC,+BAAgC,kBAC5C,EAAQ,GAAG,CAAC,6BAA8B,eAEnC,IAAI,SAAS,EAAE,IAAI,CAAE,CAAE,OAAQ,EAAE,MAAM,CAAE,WAAY,EAAE,UAAU,CAAE,QAAA,CAAQ,EACpF,CApCA,KAAK,gBAAgB,CAAC,UAAW,IAAM,KAAK,WAAW,IACvD,KAAK,gBAAgB,CAAC,WAAY,AAAA,GAAK,EAAE,SAAS,CAAC,KAAK,OAAO,CAAC,KAAK,KAqCrE,KAAK,gBAAgB,CAAC,QAAS,SAAS,CAAC,EACvC,EAAE,WAAW,CAAC,EAAY,EAAE,OAAO,EAAI,2EAA0E;AACnH,EAEF,MACG,AAAA,iBACC,GAAG,AAA+B,CAAA,IAA/B,OAAO,mBAAmB,CAAY,OAEzC,IAAI,EAAe,MAAM,UAAU,aAAa,CAAC,QAAQ,CAAC,OAAO,QAAQ,CAAC,aAAa,CAAC,GAAG,EAAE,KAAK,CAAC,AAAA,GAAK,QAAQ,KAAK,CAAC,+CAAgD,IACnK,IACD,QAAQ,GAAG,CAAC,sCAAuC,EAAa,KAAK,EAErE,EAAa,gBAAgB,CAAC,cAAe,KAC3C,QAAQ,GAAG,CAAC,mEACZ,OAAO,QAAQ,CAAC,MAAM,EACxB,GAGG,EAAa,MAAM,EAAI,CAAC,UAAU,aAAa,CAAC,UAAU,GAC3D,QAAQ,GAAG,CAAC,2DACZ,OAAO,QAAQ,CAAC,MAAM,IAG5B,GAGF,uBAAsB;AACtB,wEAAwE;AACxE,2CAA2C;AAC3C,qCAAqC;AACrC,IAAI;A,2D","sources":["<anon>","enable-threads.js"],"sourcesContent":["// NOTE: This file creates a service worker that cross-origin-isolates the page (read more here: https://web.dev/coop-coep/) which allows us to use wasm threads.\n// Normally you would set the COOP and COEP headers on the server to do this, but Github Pages doesn't allow this, so this is a hack to do that.\n/* Edited version of: coi-serviceworker v0.1.6 - Guido Zuidhof, licensed under MIT */ // From here: https://github.com/gzuidhof/coi-serviceworker\nif (typeof window === \"undefined\") {\n    self.addEventListener(\"install\", ()=>self.skipWaiting());\n    self.addEventListener(\"activate\", (e)=>e.waitUntil(self.clients.claim()));\n    async function handleFetch(request) {\n        if (request.cache === \"only-if-cached\" && request.mode !== \"same-origin\") return;\n        if (request.mode === \"no-cors\") request = new Request(request.url, {\n            cache: request.cache,\n            credentials: \"omit\",\n            headers: request.headers,\n            integrity: request.integrity,\n            destination: request.destination,\n            keepalive: request.keepalive,\n            method: request.method,\n            mode: request.mode,\n            redirect: request.redirect,\n            referrer: request.referrer,\n            referrerPolicy: request.referrerPolicy,\n            signal: request.signal\n        });\n        let r = await fetch(request).catch((e)=>console.error(e));\n        if (r.status === 0) return r;\n        const headers = new Headers(r.headers);\n        headers.set(\"Cross-Origin-Embedder-Policy\", \"credentialless\"); // or: require-corp\n        headers.set(\"Cross-Origin-Opener-Policy\", \"same-origin\");\n        return new Response(r.body, {\n            status: r.status,\n            statusText: r.statusText,\n            headers\n        });\n    }\n    self.addEventListener(\"fetch\", function(e) {\n        e.respondWith(handleFetch(e.request)); // respondWith must be executed synchonously (but can be passed a Promise)\n    });\n} else (async function() {\n    if (window.crossOriginIsolated !== false) return;\n    let registration = await navigator.serviceWorker.register(window.document.currentScript.src).catch((e)=>console.error(\"COOP/COEP Service Worker failed to register:\", e));\n    if (registration) {\n        console.log(\"COOP/COEP Service Worker registered\", registration.scope);\n        registration.addEventListener(\"updatefound\", ()=>{\n            console.log(\"Reloading page to make use of updated COOP/COEP Service Worker.\");\n            window.location.reload();\n        });\n        // If the registration is active, but it's not controlling the page\n        if (registration.active && !navigator.serviceWorker.controller) {\n            console.log(\"Reloading page to make use of COOP/COEP Service Worker.\");\n            window.location.reload();\n        }\n    }\n})();\n // Code to deregister:\n // let registrations = await navigator.serviceWorker.getRegistrations();\n // for(let registration of registrations) {\n //   await registration.unregister();\n // }\n\n//# sourceMappingURL=index.8c5732ef.js.map\n","// NOTE: This file creates a service worker that cross-origin-isolates the page (read more here: https://web.dev/coop-coep/) which allows us to use wasm threads.\n// Normally you would set the COOP and COEP headers on the server to do this, but Github Pages doesn't allow this, so this is a hack to do that.\n\n/* Edited version of: coi-serviceworker v0.1.6 - Guido Zuidhof, licensed under MIT */\n// From here: https://github.com/gzuidhof/coi-serviceworker\nif(typeof window === 'undefined') {\n  self.addEventListener(\"install\", () => self.skipWaiting());\n  self.addEventListener(\"activate\", e => e.waitUntil(self.clients.claim()));\n\n  async function handleFetch(request) {\n    if(request.cache === \"only-if-cached\" && request.mode !== \"same-origin\") {\n      return;\n    }\n    \n    if(request.mode === \"no-cors\") { // We need to set `credentials` to \"omit\" for no-cors requests, per this comment: https://bugs.chromium.org/p/chromium/issues/detail?id=1309901#c7\n      request = new Request(request.url, {\n        cache: request.cache,\n        credentials: \"omit\",\n        headers: request.headers,\n        integrity: request.integrity,\n        destination: request.destination,\n        keepalive: request.keepalive,\n        method: request.method,\n        mode: request.mode,\n        redirect: request.redirect,\n        referrer: request.referrer,\n        referrerPolicy: request.referrerPolicy,\n        signal: request.signal,\n      });\n    }\n    \n    let r = await fetch(request).catch(e => console.error(e));\n    \n    if(r.status === 0) {\n      return r;\n    }\n\n    const headers = new Headers(r.headers);\n    headers.set(\"Cross-Origin-Embedder-Policy\", \"credentialless\"); // or: require-corp\n    headers.set(\"Cross-Origin-Opener-Policy\", \"same-origin\");\n    \n    return new Response(r.body, { status: r.status, statusText: r.statusText, headers });\n  }\n\n  self.addEventListener(\"fetch\", function(e) {\n    e.respondWith(handleFetch(e.request)); // respondWith must be executed synchonously (but can be passed a Promise)\n  });\n  \n} else {\n  (async function() {\n    if(window.crossOriginIsolated !== false) return;\n\n    let registration = await navigator.serviceWorker.register(window.document.currentScript.src).catch(e => console.error(\"COOP/COEP Service Worker failed to register:\", e));\n    if(registration) {\n      console.log(\"COOP/COEP Service Worker registered\", registration.scope);\n\n      registration.addEventListener(\"updatefound\", () => {\n        console.log(\"Reloading page to make use of updated COOP/COEP Service Worker.\");\n        window.location.reload();\n      });\n\n      // If the registration is active, but it's not controlling the page\n      if(registration.active && !navigator.serviceWorker.controller) {\n        console.log(\"Reloading page to make use of COOP/COEP Service Worker.\");\n        window.location.reload();\n      }\n    }\n  })();\n}\n\n// Code to deregister:\n// let registrations = await navigator.serviceWorker.getRegistrations();\n// for(let registration of registrations) {\n//   await registration.unregister();\n// }\n"],"names":["window","handleFetch","request","cache","mode","Request","url","credentials","headers","integrity","destination","keepalive","method","redirect","referrer","referrerPolicy","signal","r","fetch","catch","e","console","error","status","Headers","set","Response","body","statusText","self","addEventListener","skipWaiting","waitUntil","clients","claim","respondWith","crossOriginIsolated","registration","navigator","serviceWorker","register","document","currentScript","src","log","scope","location","reload","active","controller"],"version":3,"file":"index.8c5732ef.js.map"}